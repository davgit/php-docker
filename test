#!/bin/bash
set -o pipefail

PHP_VERSION=${1}
IMAGE=${2:-jtreminio/php:${PHP_VERSION}}
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
FAIL='\033[0;31m[FAIL]\033[0m\n'
PASS='\033[0;32m[PASS]\033[0m\n'

if [[ -z "${PHP_VERSION// }" ]]; then
    cat << EOF
Usage: test PHP_VERSION [IMAGE]
Run tests against [IMAGE] Docker image

When IMAGE is not passed, defaults to jtreminio:{PHP_VERSION}

Example: test 7.2
    Runs tests against jtreminio:7.2

Example: test 7.2 jtreminio/php:7.2.test
    Runs tests against jtreminio/php:7.2.test
EOF

    exit 1
fi

run_fpm_container() {
    ENVFLAG=""
    if [ ! -z "${1:-}" ]; then
        ENVFLAG="-e ${1:-}"
    fi

    docker container run -d --name jtreminio_test \
        -v ${DIR}/files/index.php:/var/www/index.php \
        ${ENVFLAG} \
        ${IMAGE} /usr/bin/php-fpm > /dev/null 2>&1
}

exec_fpm_container() {
cat << EOF
docker container exec \
    jtreminio_test bash -c "SCRIPT_FILENAME=/var/www/index.php \
        REQUEST_METHOD=GET \
        cgi-fcgi -bind -connect 127.0.0.1:9000"
EOF
}

rm_fpm_container() {
    docker container rm -f jtreminio_test > /dev/null 2>&1
}

printf "Testing ${IMAGE}\n\n"

printf "[CLI] Check version correct"
EXPECTS="PHP ${PHP_VERSION}"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "php -v"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check version correct"
EXPECTS="PHP Version ${PHP_VERSION}"
CMD=$(exec_fpm_container)
run_fpm_container
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check custom INI loaded"
EXPECTS="/etc/php/${PHP_VERSION}/cli/conf.d/98-env.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "php --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check custom INI loaded"
EXPECTS="/etc/php/${PHP_VERSION}/fpm/conf.d/98-env.ini"
CMD=$(exec_fpm_container)
run_fpm_container
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check FPM INI not loaded"
EXPECTS="/etc/php/${PHP_VERSION}/fpm/conf.d/98-env.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "php --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check CLI INI not loaded"
EXPECTS="/etc/php/${PHP_VERSION}/cli/conf.d/98-env.ini"
CMD=$(exec_fpm_container)
run_fpm_container
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check display_errors set to default value"
EXPECTS="display_errors => Off => Off"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check display_errors set to default value"
EXPECTS="display_errors</td><td class=\"v\">Off"
CMD=$(exec_fpm_container)
run_fpm_container
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check display_errors accepts override value"
EXPECTS="display_errors => STDOUT => STDOUT"
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_DISPLAY_ERRORS=1 \
  ${IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check display_errors accepts override value"
EXPECTS="display_errors</td><td class=\"v\">On"
CMD=$(exec_fpm_container)
run_fpm_container "PHP_DISPLAY_ERRORS=1"
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check Xdebug not loaded by default"
EXPECTS="with Xdebug"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "php -v"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check Xdebug not loaded by default"
EXPECTS="with Xdebug"
CMD=$(exec_fpm_container)
run_fpm_container
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 0 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check Xdebug loaded by env var"
EXPECTS="with Xdebug"
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_INI_SCAN_DIR=:/etc/php/xdebug-conf.d \
  ${IMAGE} bash -c "php -v"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

printf "[FPM] Check Xdebug loaded by env var"
EXPECTS="with&nbsp;Xdebug"
CMD=$(exec_fpm_container)
run_fpm_container "PHP_INI_SCAN_DIR=:/etc/php/xdebug-conf.d"
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check xdebug.remote_host set to default value"
EXPECTS="xdebug.remote_host => host.docker.internal => host.docker.internal"
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_INI_SCAN_DIR=:/etc/php/xdebug-conf.d \
  ${IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[FPM] Check xdebug.remote_host set to default value"
EXPECTS="xdebug.remote_host</td><td class=\"v\">host.docker.internal"
CMD=$(exec_fpm_container)
run_fpm_container "PHP_INI_SCAN_DIR=:/etc/php/xdebug-conf.d"
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check xdebug.remote_host accepts overriden value"
EXPECTS="xdebug.remote_host => custom.localhost => custom.localhost"
CMD=$(cat << EOF
docker container run --rm \
  -e PHP_INI_SCAN_DIR=:/etc/php/xdebug-conf.d \
  -e XDEBUG_REMOTE_HOST=custom.localhost \
  ${IMAGE} bash -c "php -i"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[FPM] Check xdebug.remote_host accepts overriden value"
EXPECTS="xdebug.remote_host</td><td class=\"v\">custom.localhost"
CMD=$(exec_fpm_container)
run_fpm_container "PHP_INI_SCAN_DIR=:/etc/php/xdebug-conf.d -e XDEBUG_REMOTE_HOST=custom.localhost"
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check Xdebug CLI auto-sets PHP_INI_SCAN_DIR"
EXPECTS="/etc/php/xdebug-conf.d/xdebug.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "/usr/bin/xdebug --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[CLI] Check custom INI loaded"
EXPECTS="/etc/php/${PHP_VERSION}/cli/conf.d/99-custom.ini"
CMD=$(cat << EOF
docker container run --rm \
  ${IMAGE} bash -c "php --ini"
EOF
)
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

###

printf "[FPM] Check custom INI loaded"
EXPECTS="/etc/php/${PHP_VERSION}/fpm/conf.d/99-custom.ini"
CMD=$(exec_fpm_container)
run_fpm_container
RESULT=$(bash -c "${CMD}" | grep -c "${EXPECTS}")
rm_fpm_container
if [ ${RESULT} -ne 1 ]; then
    printf " ${FAIL}"
    exit 1
else
    printf " ${PASS}"
fi

exit 0
